#!/usr/bin/env node

// Script to validate if sparkline data is real or generated
import fetch from 'node-fetch';

const VERCEL_URL = 'https://cohr-dashboard-git-feature-univer-6a9738-sean-bergmans-projects.vercel.app';

async function validateSparklines() {
    console.log('üîç Validating Sparkline Data in Financial Metrics...\n');
    
    try {
        // 1. Fetch the metrics data
        console.log('1Ô∏è‚É£ Fetching universal metrics...');
        const metricsResponse = await fetch(`${VERCEL_URL}/api/universal-metrics?symbol=COHR`);
        const metricsData = await metricsResponse.json();
        
        // 2. Analyze sparkline patterns
        console.log('\n2Ô∏è‚É£ Analyzing Sparkline Data Patterns:\n');
        
        const metrics = metricsData.universalMetrics;
        
        // Check revenue sparkline
        console.log('üìä Revenue Sparkline:', metrics.revenue.sparkline);
        console.log('   Current Value: ' + metrics.revenue.value);
        console.log('   Latest Point: ' + metrics.revenue.sparkline[7]);
        console.log('   Pattern: ' + analyzePattern(metrics.revenue.sparkline));
        
        // Check gross margin sparkline
        console.log('\nüìä Gross Margin % Sparkline:', metrics.grossMarginPct.sparkline);
        console.log('   Current Value: ' + metrics.grossMarginPct.value);
        console.log('   Latest Point: ' + metrics.grossMarginPct.sparkline[7] + '%');
        console.log('   Pattern: ' + analyzePattern(metrics.grossMarginPct.sparkline));
        
        // Check operating margin sparkline
        console.log('\nüìä Operating Margin % Sparkline:', metrics.operatingMarginPct.sparkline);
        console.log('   Current Value: ' + metrics.operatingMarginPct.value);
        console.log('   Latest Point: ' + metrics.operatingMarginPct.sparkline[7] + '%');
        console.log('   Pattern: ' + analyzePattern(metrics.operatingMarginPct.sparkline));
        
        // 3. Check for suspicious patterns
        console.log('\n3Ô∏è‚É£ Checking for Suspicious Patterns:\n');
        
        // Check if sparklines are too smooth (generated)
        const revenueVariance = calculateVariance(metrics.revenue.sparkline);
        const marginVariance = calculateVariance(metrics.grossMarginPct.sparkline);
        
        console.log(`Revenue Variance: ${revenueVariance.toFixed(2)} (${revenueVariance < 5 ? '‚ö†Ô∏è Suspiciously smooth' : '‚úÖ Natural variation'})`);
        console.log(`Margin Variance: ${marginVariance.toFixed(2)} (${marginVariance < 0.5 ? '‚ö†Ô∏è Suspiciously smooth' : '‚úÖ Natural variation'})`);
        
        // Check if all metrics show same trend pattern
        const trends = [
            analyzePattern(metrics.revenue.sparkline),
            analyzePattern(metrics.grossMarginPct.sparkline),
            analyzePattern(metrics.operatingMarginPct.sparkline),
            analyzePattern(metrics.operatingIncome.sparkline)
        ];
        
        const allSameTrend = trends.every(t => t === trends[0]);
        console.log(`\nTrend Diversity: ${allSameTrend ? '‚ö†Ô∏è All metrics show same trend' : '‚úÖ Diverse trends'}`);
        
        // 4. Check the LLM prompt
        console.log('\n4Ô∏è‚É£ LLM Prompt Analysis:');
        console.log('   ‚ö†Ô∏è The prompt explicitly asks LLM to "Generate 8 realistic quarterly data points"');
        console.log('   ‚ö†Ô∏è This means sparklines are GENERATED, not extracted from filing data');
        
        // 5. What's actually in a 10-Q?
        console.log('\n5Ô∏è‚É£ What Data is Actually in a 10-Q Filing:');
        console.log('   - Current quarter (Q3 2025) vs prior year quarter (Q3 2024)');
        console.log('   - Year-to-date (9 months) vs prior year-to-date');
        console.log('   - NOT 8 quarters of historical data in condensed statements');
        console.log('   - Full 8-quarter history would require analyzing multiple 10-Q/10-K filings');
        
        // 6. Validation conclusion
        console.log('\n6Ô∏è‚É£ CONCLUSION:');
        console.log('   ‚ùå Sparkline data is HALLUCINATED/GENERATED by the LLM');
        console.log('   ‚ùå NOT extracted from actual SEC filing data');
        console.log('   ‚ö†Ô∏è  The 10-Q only contains 2 quarters of comparison data');
        console.log('   üí° To show real trends, would need to:');
        console.log('      - Fetch multiple historical 10-Q/10-K filings');
        console.log('      - Extract quarterly data from each filing');
        console.log('      - Build actual historical trend from real data');
        
    } catch (error) {
        console.error('‚ùå Validation failed:', error.message);
    }
}

function analyzePattern(data) {
    const diffs = [];
    for (let i = 1; i < data.length; i++) {
        diffs.push(data[i] - data[i-1]);
    }
    const avgDiff = diffs.reduce((a, b) => a + b, 0) / diffs.length;
    
    if (avgDiff > 0.5) return 'Upward trend';
    if (avgDiff < -0.5) return 'Downward trend';
    return 'Relatively flat';
}

function calculateVariance(data) {
    const mean = data.reduce((a, b) => a + b, 0) / data.length;
    const squaredDiffs = data.map(x => Math.pow(x - mean, 2));
    return Math.sqrt(squaredDiffs.reduce((a, b) => a + b, 0) / data.length);
}

// Run validation
validateSparklines();